--- a/arch/mips/ar231x/ar2315.c
+++ b/arch/mips/ar231x/ar2315.c
@@ -22,22 +22,51 @@
 #include <linux/kernel.h>
 #include <linux/reboot.h>
 #include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/gpio_keys.h>
 #include <linux/leds.h>
 #include <linux/gpio.h>
+#include <linux/init.h>
+#include <linux/slab.h>
 #include <asm/bootinfo.h>
 #include <asm/reboot.h>
 #include <asm/time.h>
 #include <asm/irq.h>
 #include <asm/io.h>
 
+
 #include <ar231x_platform.h>
 #include <ar2315_regs.h>
 #include <ar231x.h>
 #include "devices.h"
 #include "ar2315.h"
 
+#define AR2315_KEYS_POLL_INTERVAL   20      /* msecs */
+#define AR2315_KEYS_DEBOUNCE_INTERVAL (3 * AR2315_KEYS_POLL_INTERVAL)
+
+#define AR2315_GPIO_BTN_RESET 6
+#define AR2315_GPIO_BTN_1 7
+
 static u32 gpiointmask = 0, gpiointval = 0;
 
+static struct gpio_keys_button ar2315_gpio_keys[] __initdata = {
+    /*{
+		.desc		= "reset",
+		.type		= EV_KEY,
+		.code		= KEY_RESTART,
+		.debounce_interval = AR2315_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= AR2315_GPIO_BTN_RESET,
+		.active_low	= 1,
+	},*/ {
+		.desc		= "BTN_1",
+		.type		= EV_KEY,
+		.code		= BTN_1,
+		.debounce_interval = AR2315_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= AR2315_GPIO_BTN_1,
+		.active_low	= 0,
+	}
+};
+
 static inline void ar2315_gpio_irq(void)
 {
 	u32 pend;
@@ -577,6 +606,48 @@ static inline void ar2315_init_gpio_leds
 }
 #endif
 
+void __init ar2315_register_gpio_keys_polled(int id,
+					     unsigned poll_interval,
+					     unsigned nbuttons,
+					     struct gpio_keys_button *buttons)
+{
+	struct platform_device *pdev;
+	struct gpio_keys_platform_data pdata;
+	struct gpio_keys_button *p;
+	int err;
+
+	p = kmalloc(nbuttons * sizeof(*p), GFP_KERNEL);
+	if (!p)
+		return;
+
+	memcpy(p, buttons, nbuttons * sizeof(*p));
+
+	pdev = platform_device_alloc("gpio-keys-polled", id);
+	if (!pdev)
+	    goto err_free_buttons;
+
+	memset(&pdata, 0, sizeof(pdata));
+	pdata.poll_interval = poll_interval;
+	pdata.nbuttons = nbuttons;
+	pdata.buttons = p;
+
+	err = platform_device_add_data(pdev, &pdata, sizeof(pdata));
+	if (err)
+		goto err_put_pdev;
+
+	err = platform_device_add(pdev);
+	if (err)
+		goto err_put_pdev;
+
+	return;
+
+err_put_pdev:
+	platform_device_put(pdev);
+
+err_free_buttons:
+	kfree(p);
+}
+
 int __init
 ar2315_init_devices(void)
 {
@@ -594,6 +665,11 @@ ar2315_init_devices(void)
 		&ar2315_eth_data);
 	ar231x_add_wmac(0, AR2315_WLAN0, AR2315_IRQ_WLAN0_INTRS);
 
+
+	ar2315_register_gpio_keys_polled(-1, AR2315_KEYS_POLL_INTERVAL,
+					 ARRAY_SIZE(ar2315_gpio_keys),
+					 ar2315_gpio_keys);
+
 	return 0;
 }
 
